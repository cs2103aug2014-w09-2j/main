//@author: a0112060e



	/**
	 * origin: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java
	 */

	// these are for Update Method.
	private static final String MESSAGE_UPDATE_SUCCESSFUL = "Task %d is updated successfully.\n";

	// these are for Sort Method
	private static final String MESSAGE_SORT_SUCCESSFUL_ATTRIBUTES = "Categories are sorted successfully.\n";
	private static final String MESSAGE_SORT_SUCCESSFUL_AN_ATTRIBUTE = "A category is sorted successfully.\n";

	// these are for Search Method
	private static final String MESSAGE_SEARCH_SUCCESSFUL = "Tasks are searched successfully.\n";
	private static final String MESSAGE_EMPTY_SEARCH_RESULT = "Search key was not found.\n";

	// these are for Undo Method
	private static final String MESSAGE_UNDO_SUCCESSFULLY = "Undo one step successfully.\n";
	private static final String ERROR_NOTHING_TO_UNDO = "There is nothing to undo.\n";

	// these are for Redo Method
	private static final String ERROR_NOTHING_TO_REDO = "There is nothing to redo.\n";
	private static final String MESSAGE_REDO_SUCCESSFULLY = "Redo one step successfully.\n";

	// End of segment: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java
	 */

	/**
	 * Deletes several tasks at the same time according to indices
	 *
	 * @param command
	 * 
	 * @return a Feedback object
	 * 
	 */
	private static Feedback performDeleteAction(ExecutableCommand command) {
		Feedback fb = new Feedback(StringFormat.DELETE, false);
		ArrayList<Integer> targetTaskIndex = command.getTaskId();
		int size = targetTaskIndex.size();

		sortFromBigToSmall(targetTaskIndex); // from big to small.

		for (int i = 0; i < size; i++) {
			int index = targetTaskIndex.get(i);
			index--;

			try {
				fb.setResult(Storage.delete(index));
			} catch (Exception e) {
				fb.setMessageShowToUser(e.getMessage());
				return fb;
			}
		}

		if (fb.getResult() && size == 1) {
			fb.setMessageShowToUser(StringFormat.EXE_MSG_DELETE_SUCCESSFUL);
		} else if (fb.getResult() && size >= 1) {
			fb.setMessageShowToUser(String.format(
					StringFormat.MSG_DELETE_MULTIPLE_TASKS_SUCCESSFUL, size));
		}

		return fb;
	}

	// End of segment: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java
	 */

	/**
	 * Performs an/multiple update action(s) with a command object passed from
	 * the proceedAnalyzedCommand method
	 *
	 * @param command
	 * 
	 * @return a Feedback object
	 * 
	 */
	private static Feedback performUpdateAction(ExecutableCommand command) {
		Feedback fb = new Feedback(StringFormat.UPDATE, false);

		int taskId = command.getTaskId().get(0);
		String updateIndicator = command.getIndicator().get(0);
		String updateKeyValue = command.getKey().get(0);

		taskId--;
		try {
			fb.setResult(Storage
					.update(taskId, updateIndicator, updateKeyValue));
		} catch (Exception e) {
			fb.setMessageShowToUser(e.getMessage());
		}

		if (fb.getResult()) {
			fb.setMessageShowToUser(String.format(MESSAGE_UPDATE_SUCCESSFUL,
					(taskId + 1)));
		}

		return fb;
	}

	// End of segment: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java
	 */

	/**
	 * Performs a/multiple sort action(s) with a command object passed from the
	 * proceedAnalyzedCommand method
	 *
	 * @param command
	 *            : ExecutableCommand object containing the user's action
	 * @return
	 * 
	 */
	private static Feedback performSortAction(ExecutableCommand command) {
		Feedback fb = new Feedback(StringFormat.SORT, false);
		ArrayList<String> sortKey = command.getIndicator();
		int size = sortKey.size();

		Collections.reverse(sortKey);

		for (int i = 0; i < size; i++) {
			fb.setResult(Storage.sort(sortKey.get(i)));
		}

		// check size for displaying messages
		if (size == 1) {
			fb.setMessageShowToUser(MESSAGE_SORT_SUCCESSFUL_AN_ATTRIBUTE);
		} else if (size > 1) {
			fb.setMessageShowToUser(MESSAGE_SORT_SUCCESSFUL_ATTRIBUTES);
		}

		return fb;
	}

	// End of segment: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java
	 */

	/**
	 * Performs a/multiple search action(s) with a command object passed from
	 * the proceedAnalyzedCommand method
	 *
	 * @param command
	 *            : ExecutableCommand object containing the user's action
	 * 
	 * @return a Feedback object
	 * 
	 */
	private static Feedback performSearchAction(ExecutableCommand command) {
		Feedback fb = new Feedback(StringFormat.SEARCH, false);

		ArrayList<String> searchIndicator = command.getIndicator();
		ArrayList<String> searchValue = command.getKey();

		assert searchIndicator.size() == searchValue.size() : "Invalid size of ArrayList in search function";

		// check whether Storage can search the result or not
		for (int i = 0; i < searchIndicator.size(); i++) {
			String searchIndicatorString = searchIndicator.get(i);
			String searchValueString = searchValue.get(i);

			if (searchIndicatorString.equals(StringFormat.START_DATE)
					|| searchValueString.equals(StringFormat.END_DATE)) {
				Date date = new Date(Long.parseLong(searchValueString));
				searchValueString = date.getYear() + "";
				searchValueString = searchValueString.concat(date.getMonth()
						+ "");
				searchValueString = searchValueString.concat(date.getDate()
						+ "");
			} else if (searchIndicatorString.equals(StringFormat.START_TIME)
					|| searchValueString.equals(StringFormat.END_TIME)) {
				Date date = new Date(Long.parseLong(searchValueString));
				searchValueString = date.getHours() + "";
				searchValueString = searchValueString.concat(date.getMinutes()
						+ "");
			}
			fb.setResult(Storage.search(searchIndicatorString,
					searchValueString));
		}

		if (Storage.displayTaskList.size() == 0) {
			fb.setMessageShowToUser(MESSAGE_EMPTY_SEARCH_RESULT);
		} else {
			fb.setMessageShowToUser(MESSAGE_SEARCH_SUCCESSFUL);
		}

		return fb;
	}

	// End of segment: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java
	 */

	/**
	 * Performs an/multiple undo action(s), which reverse(s) previous steps Can
	 * perform undo multiple-steps.
	 * 
	 * @return a Feedback object
	 * 
	 */
	private static Feedback performUndoAction() {
		Feedback fb = new Feedback(StringFormat.UNDO, false);

		// pre-condition
		if (commandStack.isEmpty()) {
			fb.setMessageShowToUser(ERROR_NOTHING_TO_UNDO);
			return fb;
		}

		try {
			Stack<ExecutableCommand> temp = new Stack<ExecutableCommand>();
			redoStack.add(commandStack.pop());

			while (!commandStack.isEmpty()) {
				temp.push(commandStack.pop());
			}

			// clean the mainTaskList and doneTaskList.
			Storage.clean();
			// reload the data from saved file.
			Storage.reloadFile();

			while (!temp.isEmpty()) {
				proceedAnalyzedCommand(temp.pop());
			}

		} catch (Exception e) {
			fb.setMessageShowToUser(e.getMessage());
			return fb;
		}

		// post-condition
		if (!commandStack.isEmpty()) {
			fb.setResult(true);
			fb.setMessageShowToUser(MESSAGE_UNDO_SUCCESSFULLY);
		} else {
			fb.setResult(false);
			fb.setMessageShowToUser(ERROR_NOTHING_TO_UNDO);
		}

		return fb;
	}

	// End of segment: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java
	 */

	/**
	 * Redo the undo steps Can redo the multiple previous undo steps
	 * 
	 * @return a Feedback object
	 * 
	 */
	private static Feedback performRedoAction() {
		Feedback fb = new Feedback(StringFormat.REDO, false);

		if (redoStack.isEmpty()) {
			fb.setMessageShowToUser(ERROR_NOTHING_TO_REDO);
			return fb;
		}

		try {
			proceedAnalyzedCommand(redoStack.pop());
		} catch (Exception e) {
			fb.setMessageShowToUser(e.getMessage());
			return fb;
		}

		fb.setResult(true);
		fb.setMessageShowToUser(MESSAGE_REDO_SUCCESSFULLY);

		return fb;

	}

	// End of segment: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java
	 */

	/**
	 * Obtains a result and message of the reloadFile from Storage
	 * 
	 * @return a Feedback object
	 * 
	 */
	private static Feedback performReloadAction() {
		Feedback fb = new Feedback(StringFormat.RELOAD, false);

		try {
			Storage.reloadFile();
		} catch (Exception e) {
			fb.setMessageShowToUser("Exception in reload.\n");
			return fb;
		}

		fb.setResult(true);
		fb.setMessageShowToUser(MESSAGE_RELOAD_SUCCESSFULLY);

		return fb;
	}

	// End of segment: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\TestExecutor.java
	 */


import static org.junit.Assert.*;

import java.text.ParseException;
import org.junit.Test;

public class TestExecutor {
	ExecutableCommand obj;
	Feedback fb;
	ExecutableCommand clear = new ExecutableCommand("clear");

	@Test
	public void testAddMethod() throws ParseException {
		// check null object or not
		assertNull("An object is not null", obj);

		// check the wrong format or not
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction("ADdd");
		fb = Executor.proceedAnalyzedCommand(obj);
		assertFalse("Correct input format", fb.getResult());
		Executor.proceedAnalyzedCommand(clear);

		// check the input with all attributes correct or not
		obj.setAction(StringFormat.ADD);
		obj.setTaskName("buy bread");

		fb = Executor.proceedAnalyzedCommand(obj);
		assertTrue("Wrong input format", fb.getResult());

		obj.setTaskDescription("delicious bread");
		obj.setTaskLocation("KR MRT");
		obj.setTaskPriority("important");
		obj.setTaskStart("1424748600000");
		obj.setTaskEnd("1424835900000");

		fb = Executor.proceedAnalyzedCommand(obj);
		assertTrue("Fail to add", fb.getResult());
		Executor.proceedAnalyzedCommand(clear);

		// check the input with the start date < the end date
		obj.setTaskEnd("1424748000000");
		fb = Executor.proceedAnalyzedCommand(obj);
		assertFalse("Invalid start and end time", fb.getResult());
		Executor.proceedAnalyzedCommand(clear);

		// check the input without task name
		obj.setTaskName(null);
		fb = Executor.proceedAnalyzedCommand(obj);
		assertFalse("Invalid task name", fb.getResult());

		Executor.proceedAnalyzedCommand(clear);
	}

	@Test
	public void testDeleteMethod() throws ParseException {
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction("add");
		obj.setTaskName("meeting with friends");
		Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("buy some apples");
		Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("buy car");
		Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("travelling");
		Executor.proceedAnalyzedCommand(obj);

		// check delete index is valid or not
		fb = new Feedback(false);
		obj.setAction("delete");
		obj.setTaskId(10);
		fb = Executor.proceedAnalyzedCommand(obj);
		assertFalse("Valid index", fb.getResult());

		// check delete function works or not
		obj = new ExecutableCommand();
		obj.setAction("delete");
		obj.setTaskId(1);
		obj.setTaskId(3);
		fb = Executor.proceedAnalyzedCommand(obj);

		assertTrue("Cannot delete 2 tasks", fb.getResult());

		Executor.proceedAnalyzedCommand(clear);
	}

	@Test
	public void testUpdateMethod() throws ParseException {
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction("add");
		obj.setTaskName("buy car");
		fb = Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("buy bananas");
		fb = Executor.proceedAnalyzedCommand(obj);

		// check task Id
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction("update");
		obj.setTaskId(3);
		obj.setIndicator("name");
		obj.setKey("outing");
		fb = Executor.proceedAnalyzedCommand(obj);
		
		assertFalse("Valid index", fb.getResult());

		// valid input
		fb.setResult(false);
		obj = new ExecutableCommand();
		obj.setAction("update");
		obj.setTaskId(1);
		obj.setIndicator("priority");
		obj.setKey("high");

		fb = Executor.proceedAnalyzedCommand(obj);
		assertTrue("Invalid indicator", fb.getResult());

		Executor.proceedAnalyzedCommand(clear);
	}

	@Test
	public void testClearMethod() throws ParseException {
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction("add");
		obj.setTaskName("abc");
		fb = Executor.proceedAnalyzedCommand(obj);
		assertNotEquals("Zero task in the table", 0, fb.getTaskStringList()
				.size());

		fb.setResult(false);
		fb = Executor.proceedAnalyzedCommand(clear);
		assertEquals("Not empty", 0, fb.getTaskStringList().size());

		Executor.proceedAnalyzedCommand(clear);
	}

	@Test
	public void testSearchMethod() throws ParseException {
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction("add");
		obj.setTaskName("do assignments");
		Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("apply a part-time job");
		Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("apply scholarship");
		Executor.proceedAnalyzedCommand(obj);

		// search a word contained in the task list
		obj.setAction("search");
		obj.setIndicator("name");
		obj.setKey("apply");
		fb = Executor.proceedAnalyzedCommand(obj);

		assertEquals("There are not 2 tasks searched", 2, fb
				.getTaskStringList().size());

		Executor.proceedAnalyzedCommand(clear);
	}

	@Test
	public void testUndoRedoMethod() throws ParseException {
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction("add");
		obj.setTaskName("abc");
		Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("name");
		Executor.proceedAnalyzedCommand(obj);

		Executor.proceedAnalyzedCommand(clear);

		// check undo function
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction(StringFormat.UNDO);
		fb = Executor.proceedAnalyzedCommand(obj);

		assertTrue("Cannot undo", fb.getResult());

		// check redo function
		fb.setResult(false);
		obj.setAction("redo");
		fb = Executor.proceedAnalyzedCommand(obj);

		assertTrue("Cannot redo", fb.getResult());

		Executor.proceedAnalyzedCommand(clear);
	}
}

	// End of segment: C:\Users\user\Desktop\Repositories\cs2103-w09-2j\JOYTZ\src\TestExecutor.java






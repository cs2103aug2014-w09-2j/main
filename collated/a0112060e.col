//@author: a0112060e



	/**
	 * origin: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\Executor.java
	 */

	private static Feedback performDeleteAction(ExecutableCommand command) {
		Feedback fb = new Feedback(StringFormat.DELETE, false);

		ArrayList<Integer> targetTaskIndex = command.getTaskId();
		sortFromBigToSmall(targetTaskIndex); // from big to small.

		for (int i = 0; i < targetTaskIndex.size(); i++) {
			int index = targetTaskIndex.get(i);
			index--;

			try {
				fb.setResult(Storage.delete(index));
			} catch (Exception e) {
				fb.setMessageShowToUser(e.getMessage());
				return fb;
			}
		}

		if (fb.getResult()) {
			fb.setMessageShowToUser(StringFormat.EXE_MSG_DELETE_SUCCESSFUL);
		}

		return fb;
	}

	// End of segment: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\Executor.java
	 */

	private static Feedback performUpdateAction(ExecutableCommand command) {
		Feedback fb = new Feedback(StringFormat.UPDATE, false);

		ArrayList<Integer> taskId = command.getTaskId();
		ArrayList<String> updateIndicator = command.getIndicator();
		ArrayList<String> updateKeyValue = command.getKey();

		assert taskId.size() == updateIndicator.size() : "Invalid size of ArrayList in update function 1";
		assert taskId.size() == updateKeyValue.size() : "Invalid size of ArrayList in update function 2";
		assert updateKeyValue.size() == updateIndicator.size() : "Invalid size of ArrayList in update function 3";

		for (int i = 0; i < taskId.size(); i++) {
			int index = taskId.get(i);
			index--;

			try {
				fb.setResult(Storage.update(index, updateIndicator.get(i),
						updateKeyValue.get(i)));
			} catch (Exception e) {
				fb.setMessageShowToUser(e.getMessage());
				return fb;
			}

			if (fb.getResult()) {
				fb.setMessageShowToUser(String.format(
						MESSAGE_UPDATE_SUCCESSFUL, (index + 1)));
			}
		}

		fb.setResult(true);

		return fb;
	}

	// End of segment: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\Executor.java
	 */

	private static Feedback performSearchAction(ExecutableCommand command) {
		Feedback fb = new Feedback(StringFormat.SEARCH, false);

		ArrayList<String> searchIndicator = command.getIndicator();
		ArrayList<String> searchValue = command.getKey();

		assert searchIndicator.size() == searchValue.size() : "Invalid size of ArrayList in search function";

		// check whether Storage can search the result or not
		for (int i = 0; i < searchIndicator.size(); i++) {
			Storage.search(searchIndicator.get(i), searchValue.get(i));
		}

		fb.setResult(true);
		fb.setMessageShowToUser(MESSAGE_SEARCH_SUCCESSFUL);

		return fb;
	}

	/**
	 * Performs an/multiple undo action(s), which reverse(s) previous steps Can
	 * perform undo multiple-steps.
	 * 
	 * @return a Feedback object
	 * 
	 */
	// End of segment: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\Executor.java
	 */

	private static Feedback performUndoAction() {
		Feedback fb = new Feedback(StringFormat.UNDO, false);

		// pre-condition
		if (commandStack.isEmpty()) {
			fb.setMessageShowToUser(ERROR_NOTHING_TO_UNDO);
			return fb;
		}

		try {
			Stack<ExecutableCommand> temp = new Stack<ExecutableCommand>();
			redoStack.add(commandStack.pop());

			while (!commandStack.isEmpty()) {
				temp.push(commandStack.pop());
			}

			// clean the mainTaskList and doneTaskList.
			Storage.clean();
			// reload the data from saved file.
			Storage.reloadFile();

			while (!temp.isEmpty()) {
				proceedAnalyzedCommand(temp.pop());
			}

		} catch (Exception e) {
			fb.setMessageShowToUser(e.getMessage());
			return fb;
		}

		// post-condition
		if (!commandStack.isEmpty()) {
			fb.setResult(true);
			fb.setMessageShowToUser(MESSAGE_UNDO_SUCCESSFULLY);
		} else {
			fb.setResult(false);
			fb.setMessageShowToUser(ERROR_NOTHING_TO_UNDO);
		}

		return fb;
	}

	/**
	 * Redo the undo steps Can redo the multiple previous undo steps
	 * 
	 * @return a Feedback object
	 * 
	 */
	// End of segment: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\Executor.java
	 */

	private static Feedback performRedoAction() {
		Feedback fb = new Feedback(StringFormat.REDO, false);

		if (redoStack.isEmpty()) {
			fb.setMessageShowToUser(ERROR_NOTHING_TO_REDO);
			return fb;
		}

		try {
			proceedAnalyzedCommand(redoStack.pop());
		} catch (Exception e) {
			fb.setMessageShowToUser(e.getMessage());
			return fb;
		}

		fb.setResult(true);
		fb.setMessageShowToUser(MESSAGE_REDO_SUCCESSFULLY);

		return fb;

	}

	/**
	 * Obtains a result and message of the reloadFile from Storage
	 * 
	 * @return a Feedback object
	 * 
	 */
	// End of segment: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\Executor.java
	 */

	private static Feedback performReloadAction() {
		Feedback fb = new Feedback(StringFormat.RELOAD, false);

		try {
			Storage.reloadFile();
		} catch (Exception e) {
			fb.setMessageShowToUser("Exception in reload.\n");
			return fb;
		}

		fb.setResult(true);
		fb.setMessageShowToUser(MESSAGE_RELOAD_SUCCESSFULLY);

		return fb;
	}

	// End of segment: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\Executor.java





	/**
	 * origin: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\TestExecutor.java
	 */


import static org.junit.Assert.*;

import java.text.ParseException;
import java.util.ArrayList;

import org.junit.Test;

public class TestExecutor {
	ExecutableCommand obj;
	Feedback fb;
	ExecutableCommand clear = new ExecutableCommand("clear");

	@Test
	public void checkAddMethod() throws ParseException {
		// check null object or not
		assertNull("An object is not null", obj);

		// check the wrong format or not
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction("ADdd");
		fb = Executor.proceedAnalyzedCommand(obj);
		assertFalse("Correct input format", fb.getResult());
		Executor.proceedAnalyzedCommand(clear);

		// check the input with all attributes correct or not
		obj.setAction(StringFormat.ADD);
		obj.setTaskName("buy bread");

		fb = Executor.proceedAnalyzedCommand(obj);
		assertTrue("Wrong input format", fb.getResult());

		obj.setTaskDescription("delicious bread");
		obj.setTaskLocation("KR MRT");
		obj.setTaskPriority("important");
		obj.setTaskStart("1424748600000");
		obj.setTaskEnd("1424835900000");

		fb = Executor.proceedAnalyzedCommand(obj);
		assertTrue("Fail to add", fb.getResult());
		Executor.proceedAnalyzedCommand(clear);

		// check the input with the start date < the end date
		obj.setTaskEnd("1424748000000");
		fb = Executor.proceedAnalyzedCommand(obj);
		assertFalse("Invalid start and end time", fb.getResult());
		Executor.proceedAnalyzedCommand(clear);

		// check the input without task name
		obj.setTaskName(null);
		fb = Executor.proceedAnalyzedCommand(obj);
		assertFalse("Invalid task name", fb.getResult());

		Executor.proceedAnalyzedCommand(clear);
	}

	@Test
	public void checkDeleteMethod() throws ParseException {
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction("add");
		obj.setTaskName("meeting with friends");
		Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("buy some apples");
		Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("buy car");
		Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("travelling");
		Executor.proceedAnalyzedCommand(obj);

		// check delete index is valid or not
		fb = new Feedback(false);
		obj.setAction("delete");
		obj.setTaskId(10);
		fb = Executor.proceedAnalyzedCommand(obj);
		assertFalse("Valid index", fb.getResult());

		// check delete function works or not
		obj = new ExecutableCommand();
		obj.setAction("delete");
		obj.setTaskId(1);
		obj.setTaskId(3);
		fb = Executor.proceedAnalyzedCommand(obj);

		assertTrue("Cannot delete 2 tasks", fb.getResult());
		assertEquals("There are 2 tasks in the table", 2, fb
				.getTaskStringList().size());

		Executor.proceedAnalyzedCommand(clear);
	}

	@Test
	public void checkUpdateMethod() throws ParseException {
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction("add");
		obj.setTaskName("buy car");
		fb = Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("buy bananas");
		fb = Executor.proceedAnalyzedCommand(obj);

		// check task Id
		fb.setResult(false);
		obj.setAction("update");
		obj.setTaskId(2);
		fb = Executor.proceedAnalyzedCommand(obj);
		assertFalse("Valid index", fb.getResult());

		// valid input
		fb.setResult(false);
		obj = new ExecutableCommand();
		obj.setAction("update");
		obj.setTaskId(1);
		obj.setIndicator("priority");
		obj.setKey("high");

		fb = Executor.proceedAnalyzedCommand(obj);
		assertTrue("Invalid indicator", fb.getResult());

		Executor.proceedAnalyzedCommand(clear);
	}

	@Test
	public void checkClearMethod() throws ParseException {
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction("add");
		obj.setTaskName("abc");
		fb = Executor.proceedAnalyzedCommand(obj);
		assertEquals("More than 1 task", 1, fb.getTaskStringList().size());

		fb.setResult(false);
		fb = Executor.proceedAnalyzedCommand(clear);
		assertEquals("Not empty", 0, fb.getTaskStringList().size());

		Executor.proceedAnalyzedCommand(clear);
	}

	@Test
	public void checkSearchMethod() throws ParseException {
		obj = new ExecutableCommand();
		fb = new Feedback(false);

		obj.setAction("add");
		obj.setTaskName("do assignments");
		Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("apply a part-time job");
		Executor.proceedAnalyzedCommand(obj);

		obj.setTaskName("apply scholarship");
		Executor.proceedAnalyzedCommand(obj);

		// search a word contained in the task list
		obj.setAction("search");
		obj.setIndicator("name");
		obj.setKey("apply");
		fb = Executor.proceedAnalyzedCommand(obj);

		assertEquals("There are not 2 tasks searched", 2, fb
				.getTaskStringList().size());
		
		Executor.proceedAnalyzedCommand(clear);
	}
}

	// End of segment: C:\Users\Joel\Desktop\Repositories\cs2103aug2014-w09-2j\JOYTZ\src\TestExecutor.java





